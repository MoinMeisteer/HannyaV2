import discord
from discord.ext import commands
import yt_dlp as youtube_dl
import asyncio

intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
bot = commands.Bot(command_prefix='!', intents=intents)

youtube_dl.utils.bug_reports_message = lambda: ''

ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0'
}

ffmpeg_options = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5 -timeout 6000000 -rw_timeout 3000000',
    'options': '-vn -b:a 64k'
}

ytdl = youtube_dl.YoutubeDL(ytdl_format_options)

class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)
        self.data = data
        self.title = data.get('title')
        self.url = data.get('url')

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=False):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))
        
        if 'entries' in data:
            data = data['entries'][0]
        
        filename = data['url'] if stream else ytdl.prepare_filename(data)
        return cls(discord.FFmpegPCMAudio(filename, **ffmpeg_options), data=data)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')

@bot.command(name='join', help='Tells the bot to join the voice channel')
async def join(ctx):
    if not ctx.author.voice:
        await ctx.send("Du bist mit keinem Voice-Channel verbunden.")
        return
    else:
        channel = ctx.author.voice.channel

    await channel.connect()
    await ctx.send(f"Joined {channel}")

@bot.command(name='leave', help='To make the bot leave the voice channel')
async def leave(ctx):
    voice_client = ctx.guild.voice_client
    if voice_client.is_connected():
        await voice_client.disconnect()
    else:
        await ctx.send("Der Bot ist mit keinem Voice-Channel verbunden.")

@bot.command(name='play', help='Plays a song from YouTube')
async def play(ctx, url):
    try:
        voice_client = ctx.guild.voice_client
        
        if not voice_client:
            await join(ctx)  # Verbinde den Bot mit dem Voice-Channel, falls noch nicht verbunden
            voice_client = ctx.guild.voice_client
        
        player = await YTDLSource.from_url(url, loop=bot.loop, stream=True)
        voice_client.play(player, after=lambda e: print(f'Player error: {e}') if e else None)
        await ctx.send(f'Now playing: {player.title}')
    except Exception as e:
        await ctx.send(f'Ein Fehler ist aufgetreten: {e}')

@bot.command(name='pause', help='This command pauses the song')
async def pause(ctx):
    voice_client = ctx.guild.voice_client
    if voice_client.is_playing():
        voice_client.pause()
    else:
        await ctx.send("Der Bot spielt momentan nichts ab.")

@bot.command(name='resume', help='Resumes the song')
async def resume(ctx):
    voice_client = ctx.guild.voice_client
    if voice_client is paused():
        voice_client.resume()
    else:
        await ctx.send("Der Bot hat vorher nichts abgespielt. Nutze den `!play` Befehl.")

@bot.command(name='stop', help='Stops the current song')
async def stop(ctx):
    voice_client = ctx.guild.voice_client
    if voice_client.is_playing():
        voice_client.stop()
    await voice_client.disconnect()

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandInvokeError):
        await ctx.send('There was an error: {}'.format(str(error)))
    else:
        await ctx.send('An error occurred: {}'.format(str(error)))
    print(f'Error: {str(error)}')


bot.run('Discord_token')
